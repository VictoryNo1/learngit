1.配置Git的全局参数
	git config --global user.name "Your Name"
	git config --global user.email "Your Email"
	
2.将某个目录添加到Git可管理的仓库：
	1.切换到该目录下 cd ...
	2. git init
3.把一个文件添加到Git的仓库：
	1.切换到该仓库下。
	2.git add file name
	3.git commit -m "文件版本说明"
	注：可以add多个文件，然后commit
4.查看当前仓库状态：
	1.git status:
5.查看某文件的具体修改内容：
	1.git diff fileNamw
6.查看Git仓库的操作历史记录：
	1.git log
	此命令显示从最近到最远的提交日志
	若觉得输出的信息太多，可以试试加上--pretty=oneline
7.版本回退
	1.git reset --hard HEAD^  参数 --hard的作用后面再讲
	2.如果想回退到指定版本则：
		git reset --hard 版本号
		版本号可以在git log中查找
8.查看执行命令的历史记录
	1.git reflog
9.查看工作区和版本库里面最新版本的区别
	1.git diff HEAD -- fileName
10.丢弃暂存区的文件(让这个文件回到工作区)
	1.git restore --staged fileName 
11.丢弃工作区中的修改：
	2.git restore fileName  放弃在工作区的修改。
12. 当添加到暂存区的文件被删除掉之后，一般有两种选择：
	1.是确实要从版本库中删掉该文件，用命令git rm 删掉并且git commit。
	2.是删错了，可以用git restore fileName 恢复为最后一版文件
13.退出git log 
	在英文状态下按下Q
14.创建本机的ssh密钥
	1.ssh-keygen -t rsa -C "email@xxx.com"
	git 会提示你密钥产生的位置
	产生的id_rsa.pub 是公钥，id_rsa是私钥
	在github中的SSH Keys中添加公钥文件里面的内容。
	然后在github中创建远程仓库。
15.将本地库与远程库关联起来:
	1.在本地库中运行  git remote add origin(默认远程库的名字，也可以改成别的) git@github.com:github帐户名/在github上仓库的名字.git
	2.git push -u origin(远程库的名字) master (将本地分支推送到远程库上，-u 参数指Git 不但会把本地的master 分支内容推送到远程新的master分支，还会把本地的master分支和远程master分支关联起来,以后的推送或者拉取时就可以简化命令)
	3.git push origin master （把本地master分支的最新修改推送到github上）
16.克隆远程库
	1.git clone git@github.com:GitHub账户名/Github上远程库的名字.git （https://github.com/GitHub账户名/Github上远程库的名字.git）https速度慢，每次推送都要输入口令。
17.创建新的的分支：
	1.git checkout -b 分支名称  (创建新的分支，并切换到该分支，相当于（ git branch 分支名;git checkout 分支名称 ）,这两条命令。)
	2.git switch -c 分支名(创建并切换到该分支，和上面第一条命令效果一样)
18.查看当前分支：
	1.git branch
	
19.切换分支：
	1.git checkout 分支名
	2.git switch 分支名 (切换到指定分支，和第一条效果一样)
20.将指定分支合并到当前分支:
	1.git merge 分支名
21.删除指定分支：
	1.git branch -d 分支名
22.查看合并分支图：
	git log --graph
	git log --graph --pretty=oneline --abbrev-commit
23.合并有冲突时先手动解决冲突，然后再提交。
24.分支管理策略：
	Fast forward:删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	合并分支时不用 Fast forward 模式。
	git merge --no-ff -m "版本描述" 要合并的分支名
25.修改A分支时，去修改B分支，修改完B分支后把B分支提交，然后在master上合并B分支上的工作，然后回到A分支，并把B分支的修改，转移到A分支上：
	1.首先在A分支上保存文件并用 git add fileName 将修改的文件保存到暂存区。
	2.用git stash 隐藏当前工作区。
	3.切换到B分支修改并提交,并记下提交的哈希值。
	4.到master上merge B文件的提交。
	5.删除B分支（也可以不删除）
	6.回到A分支，并用git cherry-pick 刚刚提交产生的哈希值。
	7.用git stash list 查看stash列表
	8.用git stash apply 。。恢复刚刚合并修改的工作区
	9.用git stash drop。。删除指定的stash
	（或者用git stash pop还原工作区并直接删除stash）